use crate::MAX_DEPTH;
use crate::utils::{Move, Board, VectorReuser, HashMapReuser, generate_into, generate_captures_into, generate_checks_into, generate_check_evasions_into, BestMoves, get_move, get_capture, clear_cache, PositionStorer};
use crate::hashing::Hasher;
use crate::move_gen::generate_defenders_into;

use std::cmp::max;
use std::collections::HashMap;
use std::pin::Pin;
use std::ptr::hash;
use std::sync::mpsc::Sender;
use std::{sync, thread};
use std::time::Duration;

//     let mut eval = evaluation(board);
//     let hash;
// pub fn old_search(reuser: &mut VectorReuser<Move>, board: &mut Board, depth: usize, index: usize, mut alpha: f64, beta: f64, cache: &mut HashMap<u64, f64>, hasher: &Hasher) -> f64 {
//
pub static EYEING_VALUES: [[i64; 13]; 13] = [
//   E   PW  NW  BW  RW  QW   KW   PB  NB  BB  RB  QB  KB
    [0,  0,  0,  0,  0,   0,   0,   0,  0,  0,  0,   0,  0 ], // E
    [0,  5,  3,  0,  1,   0,   0,   0,  0,  0,  0,   0,  25], // PW
    [0,  1,  2,  1,  1,   1,   0,   2,  0,  2,  5,   15, 15], // NW
    [0,  1,  2,  1,  1,   1,   0,   2,  5,  0,  5,   15, 10], // BW
    [0,  0,  1,  1,  20,  1,   0,   2,  5,  5,  0,   10, 15], // RW
    [0,  0,  1,  1,  1,   5,   0,   2,  2,  2,  3,   0,  25], // QW
    [0,  20, 0,  0,  0,   0,   0,   1,  1,  0,  0,   0,  0 ], // KW
    [0,  0,  0,  0,  0,   0,  -25, -5, -3,  0, -1,   0,  0 ], // PB
    [0, -2,  0, -2, -5,  -15, -15, -1, -2, -1, -1,  -1,  0 ], // NB
    [0, -2, -5,  0, -5,  -15, -10, -1, -2, -1, -1,  -1,  0 ], // BB
    [0, -2, -5, -5,  0,  -10, -15,  0, -1, -1, -20, -1 , 0 ], // RB
    [0, -2, -2, -2, -3,   0,  -25,  0, -1, -1, -1,  -5 , 0 ], // QB
    [0, -1, -1,  0,  0,   0,   0,  -20, 0,  0,  0,   0,  0 ]  // KB
];


// this is a lot of bs i will have to manually tune (later tho)
pub static DISAPPOINTMENT_VALUES: [i64; 2] = [40_000, 75_000];
pub static HOPE_VALUES: [i64; 7] = [0, 3_000, 10_000, 30_000, 75_000, 200_000, 100_000_000_000];
// need to manually reweigh this against evaluation_function::MATERIAL_WEIGHT
// no
pub static PIECE_DELTA: [i64; 13] = [20_000, 30_000, 50_000, 50_000, 70_000, 110_000, 100_000_000, 30_000, 50_000, 50_000, 70_000, 110_000, 100_000_000];
pub static MATERIAL_WORTH: [i64; 13] = [0, 100, 305, 333, 563, 950, 1_000_000, -100, -305, -333, -563, -950, -1_000_000];
pub static PIECE_SQUARE_TABLE: [[[i64; 8]; 8]; 13] = [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [175, 150, 135, 125, 125, 135, 150, 175], [110, 95, 90, 85, 85, 90, 95, 110], [60, 30, 15, 15, 15, 15, 30, 60], [0, -20, 25, 25, 25, 10, -20, 0], [-10, -10, -20, -10, -10, -20, -10, -10], [20, 20, 10, -50, -50, 15, 20, 20], [0, 0, 0, 0, 0, 0, 0, 0]], [[-50, -30, -30, -30, -30, -30, -30, -50], [-30, -15, -10, -10, -10, -10, -15, -30], [-30, 0, 5, 15, 15, 5, 0, -30], [-30, 0, 20, 40, 40, 20, 0, -30], [-30, 0, 20, 40, 40, 20, 0, -30], [-30, 0, 20, 10, 10, 20, 0, -30], [-30, -15, -10, -10, -10, -10, -15, -30], [-50, -30, -30, -30, -30, -30, -30, -50]], [[-20, -20, -20, -20, -20, -20, -20, -20], [-20, -10, 0, 0, 0, 0, -10, -20], [-20, 0, 20, 10, 10, 20, 0, -20], [-20, 0, 10, 30, 30, 10, 0, -20], [-20, 0, 20, 30, 30, 20, 0, -20], [-20, 0, 15, 10, 10, 15, 0, -20], [-20, -10, 0, 0, 0, 0, -10, -20], [-20, -20, -20, -20, -20, -20, -20, -20]], [[40, 40, 40, 40, 40, 40, 40, 40], [40, 40, 40, 40, 40, 40, 40, 40], [0, 0, 5, 20, 20, 5, 0, 0], [0, 0, 5, 10, 10, 5, 0, 0], [0, 0, 5, 10, 10, 5, 0, 0], [0, 0, 5, 10, 10, 5, 0, 0], [0, 0, 5, 10, 10, 5, 0, 0], [0, 0, 10, 20, 20, 10, 0, 0]], [[-10, -5, -5, -5, -5, -5, -5, -10], [-5, 0, 5, 5, 5, 5, 0, -5], [-5, 0, 10, 10, 10, 10, 0, -5], [-5, 0, 10, 10, 10, 10, 0, -5], [-5, 0, 10, 10, 10, 10, 0, -5], [-5, 0, 10, 10, 10, 10, 0, -5], [-5, 0, 0, 0, 0, 0, 0, -5], [-10, -5, -5, -5, -5, -5, -5, -10]], [[-50, -40, -30, -30, -30, -30, -40, -50], [-40, -20, 0, 10, 10, 0, -20, -40], [-30, -10, 10, 20, 20, 10, -10, -30], [-30, -10, 10, 20, 20, 10, -10, -30], [-30, -10, 0, 10, 10, 0, -10, -30], [-30, -20, -20, -20, -20, -20, -20, -30], [-25, -20, -20, -20, -20, -20, -20, -25], [-15, 20, 20, -20, -20, 0, 20, -15]], [[0, 0, 0, 0, 0, 0, 0, 0], [-20, -20, -10, 50, 50, -15, -20, -20], [10, 10, 20, 10, 10, 20, 10, 10], [0, 20, -25, -25, -25, -10, 20, 0], [-60, -30, -15, -15, -15, -15, -30, -60], [-110, -95, -90, -85, -85, -90, -95, -110], [-175, -150, -135, -125, -125, -135, -150, -175], [0, 0, 0, 0, 0, 0, 0, 0]], [[50, 30, 30, 30, 30, 30, 30, 50], [30, 15, 10, 10, 10, 10, 15, 30], [30, 0, -20, -10, -10, -20, 0, 30], [30, 0, -20, -40, -40, -20, 0, 30], [30, 0, -20, -40, -40, -20, 0, 30], [30, 0, -5, -15, -15, -5, 0, 30], [30, 15, 10, 10, 10, 10, 15, 30], [50, 30, 30, 30, 30, 30, 30, 50]], [[20, 20, 20, 20, 20, 20, 20, 20], [20, 10, 0, 0, 0, 0, 10, 20], [20, 0, -15, -10, -10, -15, 0, 20], [20, 0, -20, -30, -30, -20, 0, 20], [20, 0, -10, -30, -30, -10, 0, 20], [20, 0, -20, -10, -10, -20, 0, 20], [20, 10, 0, 0, 0, 0, 10, 20], [20, 20, 20, 20, 20, 20, 20, 20]], [[0, 0, -10, -20, -20, -10, 0, 0], [0, 0, -5, -10, -10, -5, 0, 0], [0, 0, -5, -10, -10, -5, 0, 0], [0, 0, -5, -10, -10, -5, 0, 0], [0, 0, -5, -10, -10, -5, 0, 0], [0, 0, -5, -20, -20, -5, 0, 0], [-40, -40, -40, -40, -40, -40, -40, -40], [-40, -40, -40, -40, -40, -40, -40, -40]], [[10, 5, 5, 5, 5, 5, 5, 10], [5, 0, 0, 0, 0, 0, 0, 5], [5, 0, -10, -10, -10, -10, 0, 5], [5, 0, -10, -10, -10, -10, 0, 5], [5, 0, -10, -10, -10, -10, 0, 5], [5, 0, -10, -10, -10, -10, 0, 5], [5, 0, -5, -5, -5, -5, 0, 5], [10, 5, 5, 5, 5, 5, 5, 10]], [[15, -20, -20, 20, 20, 0, -20, 15], [25, 20, 20, 20, 20, 20, 20, 25], [30, 20, 20, 20, 20, 20, 20, 30], [30, 10, 0, -10, -10, 0, 10, 30], [30, 10, -10, -20, -20, -10, 10, 30], [30, 10, -10, -20, -20, -10, 10, 30], [40, 20, 0, -10, -10, 0, 20, 40], [50, 40, 30, 30, 30, 30, 40, 50]]];
// nusprendziau kad neapsimoka
// nusprendziau kad eik tu nachui
pub static SQUARE_IMPORTANCE: [[i64; 8]; 8] = [[5, 5, 5, 5, 5, 5, 5, 5], [5, 6, 7, 7, 7, 7, 6, 5], [5, 7, 8, 8, 8, 8, 7, 5], [5, 7, 8, 10, 10, 8, 7, 5], [5, 7, 8, 10, 10, 8, 7, 5], [5, 7, 8, 8, 8, 8, 7, 5], [5, 6, 7, 7, 7, 7, 6, 5], [5, 5, 5, 5, 5, 5, 5, 5]];
pub static KING_SAFETY_VALUES: [i64; 1000] = [0, 0, 1, 2, 3, 5, 7, 9, 12, 15, 18, 22, 26, 30, 35, 39, 44, 50, 56, 62, 68, 75, 82, 85, 89, 97, 105, 113, 122, 131, 140, 150, 169, 180, 191, 202, 213, 225, 237, 248, 260, 272, 283, 295, 307, 319, 330, 342, 354, 366, 377, 389, 401, 412, 424, 436, 448, 459, 471, 483, 494, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500];
pub static KING_ATTACK_VALUES: [usize; 13] = [0, 1, 2, 2, 3, 5, 0, 1, 2, 2, 3, 5, 0];
pub static KING_DANGER_VALUES: [i64; 13] = [0, 0, 1, 1, 3, 10, 5, 0, 1, 1, 3, 10, 5];
pub static KING_DEFENCE_ZONE: [[[[usize; 8]; 8]; 8]; 8] = [[[[0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[1, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]], [[[1, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1]]], [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0]]]];
pub static KING_FEDENCE_NOZE: [[[Option<(usize, usize)>; 8]; 8]; 8] = [[[Some((0, 1)), Some((1, 0)), Some((1, 1)), None, None, None, None, None], [Some((0, 0)), Some((0, 2)), Some((1, 0)), Some((1, 1)), Some((1, 2)), None, None, None], [Some((0, 1)), Some((0, 3)), Some((1, 1)), Some((1, 2)), Some((1, 3)), None, None, None], [Some((0, 2)), Some((0, 4)), Some((1, 2)), Some((1, 3)), Some((1, 4)), None, None, None], [Some((0, 3)), Some((0, 5)), Some((1, 3)), Some((1, 4)), Some((1, 5)), None, None, None], [Some((0, 4)), Some((0, 6)), Some((1, 4)), Some((1, 5)), Some((1, 6)), None, None, None], [Some((0, 5)), Some((0, 7)), Some((1, 5)), Some((1, 6)), Some((1, 7)), None, None, None], [Some((0, 6)), Some((1, 6)), Some((1, 7)), None, None, None, None, None]], [[Some((0, 0)), Some((0, 1)), Some((1, 1)), Some((2, 0)), Some((2, 1)), None, None, None], [Some((0, 0)), Some((0, 1)), Some((0, 2)), Some((1, 0)), Some((1, 2)), Some((2, 0)), Some((2, 1)), Some((2, 2))], [Some((0, 1)), Some((0, 2)), Some((0, 3)), Some((1, 1)), Some((1, 3)), Some((2, 1)), Some((2, 2)), Some((2, 3))], [Some((0, 2)), Some((0, 3)), Some((0, 4)), Some((1, 2)), Some((1, 4)), Some((2, 2)), Some((2, 3)), Some((2, 4))], [Some((0, 3)), Some((0, 4)), Some((0, 5)), Some((1, 3)), Some((1, 5)), Some((2, 3)), Some((2, 4)), Some((2, 5))], [Some((0, 4)), Some((0, 5)), Some((0, 6)), Some((1, 4)), Some((1, 6)), Some((2, 4)), Some((2, 5)), Some((2, 6))], [Some((0, 5)), Some((0, 6)), Some((0, 7)), Some((1, 5)), Some((1, 7)), Some((2, 5)), Some((2, 6)), Some((2, 7))], [Some((0, 6)), Some((0, 7)), Some((1, 6)), Some((2, 6)), Some((2, 7)), None, None, None]], [[Some((1, 0)), Some((1, 1)), Some((2, 1)), Some((3, 0)), Some((3, 1)), None, None, None], [Some((1, 0)), Some((1, 1)), Some((1, 2)), Some((2, 0)), Some((2, 2)), Some((3, 0)), Some((3, 1)), Some((3, 2))], [Some((1, 1)), Some((1, 2)), Some((1, 3)), Some((2, 1)), Some((2, 3)), Some((3, 1)), Some((3, 2)), Some((3, 3))], [Some((1, 2)), Some((1, 3)), Some((1, 4)), Some((2, 2)), Some((2, 4)), Some((3, 2)), Some((3, 3)), Some((3, 4))], [Some((1, 3)), Some((1, 4)), Some((1, 5)), Some((2, 3)), Some((2, 5)), Some((3, 3)), Some((3, 4)), Some((3, 5))], [Some((1, 4)), Some((1, 5)), Some((1, 6)), Some((2, 4)), Some((2, 6)), Some((3, 4)), Some((3, 5)), Some((3, 6))], [Some((1, 5)), Some((1, 6)), Some((1, 7)), Some((2, 5)), Some((2, 7)), Some((3, 5)), Some((3, 6)), Some((3, 7))], [Some((1, 6)), Some((1, 7)), Some((2, 6)), Some((3, 6)), Some((3, 7)), None, None, None]], [[Some((2, 0)), Some((2, 1)), Some((3, 1)), Some((4, 0)), Some((4, 1)), None, None, None], [Some((2, 0)), Some((2, 1)), Some((2, 2)), Some((3, 0)), Some((3, 2)), Some((4, 0)), Some((4, 1)), Some((4, 2))], [Some((2, 1)), Some((2, 2)), Some((2, 3)), Some((3, 1)), Some((3, 3)), Some((4, 1)), Some((4, 2)), Some((4, 3))], [Some((2, 2)), Some((2, 3)), Some((2, 4)), Some((3, 2)), Some((3, 4)), Some((4, 2)), Some((4, 3)), Some((4, 4))], [Some((2, 3)), Some((2, 4)), Some((2, 5)), Some((3, 3)), Some((3, 5)), Some((4, 3)), Some((4, 4)), Some((4, 5))], [Some((2, 4)), Some((2, 5)), Some((2, 6)), Some((3, 4)), Some((3, 6)), Some((4, 4)), Some((4, 5)), Some((4, 6))], [Some((2, 5)), Some((2, 6)), Some((2, 7)), Some((3, 5)), Some((3, 7)), Some((4, 5)), Some((4, 6)), Some((4, 7))], [Some((2, 6)), Some((2, 7)), Some((3, 6)), Some((4, 6)), Some((4, 7)), None, None, None]], [[Some((3, 0)), Some((3, 1)), Some((4, 1)), Some((5, 0)), Some((5, 1)), None, None, None], [Some((3, 0)), Some((3, 1)), Some((3, 2)), Some((4, 0)), Some((4, 2)), Some((5, 0)), Some((5, 1)), Some((5, 2))], [Some((3, 1)), Some((3, 2)), Some((3, 3)), Some((4, 1)), Some((4, 3)), Some((5, 1)), Some((5, 2)), Some((5, 3))], [Some((3, 2)), Some((3, 3)), Some((3, 4)), Some((4, 2)), Some((4, 4)), Some((5, 2)), Some((5, 3)), Some((5, 4))], [Some((3, 3)), Some((3, 4)), Some((3, 5)), Some((4, 3)), Some((4, 5)), Some((5, 3)), Some((5, 4)), Some((5, 5))], [Some((3, 4)), Some((3, 5)), Some((3, 6)), Some((4, 4)), Some((4, 6)), Some((5, 4)), Some((5, 5)), Some((5, 6))], [Some((3, 5)), Some((3, 6)), Some((3, 7)), Some((4, 5)), Some((4, 7)), Some((5, 5)), Some((5, 6)), Some((5, 7))], [Some((3, 6)), Some((3, 7)), Some((4, 6)), Some((5, 6)), Some((5, 7)), None, None, None]], [[Some((4, 0)), Some((4, 1)), Some((5, 1)), Some((6, 0)), Some((6, 1)), None, None, None], [Some((4, 0)), Some((4, 1)), Some((4, 2)), Some((5, 0)), Some((5, 2)), Some((6, 0)), Some((6, 1)), Some((6, 2))], [Some((4, 1)), Some((4, 2)), Some((4, 3)), Some((5, 1)), Some((5, 3)), Some((6, 1)), Some((6, 2)), Some((6, 3))], [Some((4, 2)), Some((4, 3)), Some((4, 4)), Some((5, 2)), Some((5, 4)), Some((6, 2)), Some((6, 3)), Some((6, 4))], [Some((4, 3)), Some((4, 4)), Some((4, 5)), Some((5, 3)), Some((5, 5)), Some((6, 3)), Some((6, 4)), Some((6, 5))], [Some((4, 4)), Some((4, 5)), Some((4, 6)), Some((5, 4)), Some((5, 6)), Some((6, 4)), Some((6, 5)), Some((6, 6))], [Some((4, 5)), Some((4, 6)), Some((4, 7)), Some((5, 5)), Some((5, 7)), Some((6, 5)), Some((6, 6)), Some((6, 7))], [Some((4, 6)), Some((4, 7)), Some((5, 6)), Some((6, 6)), Some((6, 7)), None, None, None]], [[Some((5, 0)), Some((5, 1)), Some((6, 1)), Some((7, 0)), Some((7, 1)), None, None, None], [Some((5, 0)), Some((5, 1)), Some((5, 2)), Some((6, 0)), Some((6, 2)), Some((7, 0)), Some((7, 1)), Some((7, 2))], [Some((5, 1)), Some((5, 2)), Some((5, 3)), Some((6, 1)), Some((6, 3)), Some((7, 1)), Some((7, 2)), Some((7, 3))], [Some((5, 2)), Some((5, 3)), Some((5, 4)), Some((6, 2)), Some((6, 4)), Some((7, 2)), Some((7, 3)), Some((7, 4))], [Some((5, 3)), Some((5, 4)), Some((5, 5)), Some((6, 3)), Some((6, 5)), Some((7, 3)), Some((7, 4)), Some((7, 5))], [Some((5, 4)), Some((5, 5)), Some((5, 6)), Some((6, 4)), Some((6, 6)), Some((7, 4)), Some((7, 5)), Some((7, 6))], [Some((5, 5)), Some((5, 6)), Some((5, 7)), Some((6, 5)), Some((6, 7)), Some((7, 5)), Some((7, 6)), Some((7, 7))], [Some((5, 6)), Some((5, 7)), Some((6, 6)), Some((7, 6)), Some((7, 7)), None, None, None]], [[Some((6, 0)), Some((6, 1)), Some((7, 1)), None, None, None, None, None], [Some((6, 0)), Some((6, 1)), Some((6, 2)), Some((7, 0)), Some((7, 2)), None, None, None], [Some((6, 1)), Some((6, 2)), Some((6, 3)), Some((7, 1)), Some((7, 3)), None, None, None], [Some((6, 2)), Some((6, 3)), Some((6, 4)), Some((7, 2)), Some((7, 4)), None, None, None], [Some((6, 3)), Some((6, 4)), Some((6, 5)), Some((7, 3)), Some((7, 5)), None, None, None], [Some((6, 4)), Some((6, 5)), Some((6, 6)), Some((7, 4)), Some((7, 6)), None, None, None], [Some((6, 5)), Some((6, 6)), Some((6, 7)), Some((7, 5)), Some((7, 7)), None, None, None], [Some((6, 6)), Some((6, 7)), Some((7, 6)), None, None, None, None, None]]];
pub static MATERIAL_IMPORTANCE: [i64; 1000] = [100, 99, 99, 98, 97, 97, 96, 96, 95, 94, 94, 93, 92, 92, 91, 90, 90, 89, 88, 88, 87, 87, 86, 85, 85, 84, 83, 83, 82, 81, 81, 80, 79, 79, 78, 78, 77, 76, 76, 75, 74, 74, 73, 72, 72, 71, 71, 70, 69, 69, 68, 67, 67, 66, 65, 65, 64, 63, 63, 62, 62, 61, 60, 60, 59, 58, 58, 57, 56, 56, 55, 54, 54, 53, 53, 52, 51, 51, 50, 49, 49, 48, 47, 47, 46, 46, 45, 44, 44, 43, 42, 42, 41, 40, 40, 39, 38, 38, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37];
pub static PAWN_BLOCKING_PENALTIES: [[[[i64; 8]; 8]; 13]; 2] = [[[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, -10, 0, 0, 0, 0, 0, 0], [0, -10, 0, 0, 0, 0, 0, 0], [0, 50, 0, 0, 0, 0, 0, 0], [0, 50, 0, 0, 0, 0, 0, 0], [0, -10, 0, 0, 0, 0, 0, 0], [0, -10, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 1, 1, 5, 5, 15, 30, 0], [0, 2, 1, 5, 5, 15, 30, 0], [0, 30, 10, 1, 5, 15, 30, 0], [0, 50, 10, 1, 5, 15, 30, 0], [0, 50, 10, 1, 5, 15, 30, 0], [0, 30, 10, 1, 5, 15, 30, 0], [0, 2, 1, 5, 5, 15, 30, 0], [0, 1, 1, 5, 5, 15, 30, 0]], [[0, 1, 1, 5, 5, 15, 30, 0], [0, 2, 1, 5, 5, 15, 30, 0], [0, 30, 10, 1, 5, 15, 30, 0], [0, 50, 10, 1, 5, 15, 30, 0], [0, 50, 10, 1, 5, 15, 30, 0], [0, 30, 10, 1, 5, 15, 30, 0], [0, 2, 1, 5, 5, 15, 30, 0], [0, 1, 1, 5, 5, 15, 30, 0]], [[0, 10, 5, 5, 10, 10, 60, 0], [0, 10, 5, 5, 10, 10, 60, 0], [0, 30, 5, 5, 10, 10, 60, 0], [0, 90, 50, 5, 10, 10, 60, 0], [0, 90, 50, 5, 10, 10, 60, 0], [0, 30, 5, 5, 10, 10, 60, 0], [0, 10, 5, 5, 10, 10, 60, 0], [0, 10, 5, 5, 10, 10, 60, 0]], [[0, 1, 1, 5, 5, 5, 30, 0], [0, 2, 1, 5, 5, 5, 30, 0], [0, 30, 10, 1, 5, 15, 30, 0], [0, 50, 10, 1, 5, 15, 30, 0], [0, 50, 10, 1, 5, 15, 30, 0], [0, 30, 10, 1, 5, 15, 30, 0], [0, 2, 1, 5, 5, 5, 30, 0], [0, 1, 1, 5, 5, 5, 30, 0]], [[0, 10, 5, 5, -5, -5, -5, 0], [0, 10, 5, 5, -5, -5, -5, 0], [0, 30, 5, 5, -5, -5, -5, 0], [0, 90, 5, 5, -5, -5, -5, 0], [0, 90, 5, 5, -5, -5, -5, 0], [0, 30, 5, 5, -5, -5, -5, 0], [0, 10, 5, 5, -5, -5, -5, 0], [0, 10, 5, 5, -5, -5, -5, 0]], [[0, 1, 1, 1, 1, 5, 0, 0], [0, 1, 1, 1, 1, 5, 0, 0], [0, 1, 1, 1, 1, 5, 0, 0], [0, 1, 1, 1, 1, 5, 0, 0], [0, 1, 1, 1, 1, 5, 0, 0], [0, 1, 1, 1, 1, 5, 0, 0], [0, 1, 1, 1, 1, 5, 0, 0], [0, 1, 1, 1, 1, 5, 0, 0]], [[0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0]], [[0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0]], [[0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0]], [[0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0], [0, 1, 1, 1, 1, 3, 5, 0]], [[0, 1, 1, 1, 1, 5, 20, 0], [0, 1, 1, 1, 1, 5, 20, 0], [0, 1, 1, 1, 1, 5, 20, 0], [0, 1, 1, 1, 1, 5, 20, 0], [0, 1, 1, 1, 1, 5, 20, 0], [0, 1, 1, 1, 1, 5, 20, 0], [0, 1, 1, 1, 1, 5, 20, 0], [0, 1, 1, 1, 1, 5, 20, 0]]], [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 10, 0], [0, 0, 0, 0, 0, 0, 10, 0], [0, 0, 0, 0, 0, 0, -50, 0], [0, 0, 0, 0, 0, 0, -50, 0], [0, 0, 0, 0, 0, 0, 10, 0], [0, 0, 0, 0, 0, 0, 10, 0], [0, 0, 0, 0, 0, 0, 0, 0]], [[0, -30, -15, -5, -5, -1, -1, 0], [0, -30, -15, -5, -5, -1, -2, 0], [0, -30, -15, -5, -1, -10, -30, 0], [0, -30, -15, -5, -1, -10, -50, 0], [0, -30, -15, -5, -1, -10, -50, 0], [0, -30, -15, -5, -1, -10, -30, 0], [0, -30, -15, -5, -5, -1, -2, 0], [0, -30, -15, -5, -5, -1, -1, 0]], [[0, -30, -15, -5, -5, -1, -1, 0], [0, -30, -15, -5, -5, -1, -2, 0], [0, -30, -15, -5, -1, -10, -30, 0], [0, -30, -15, -5, -1, -10, -50, 0], [0, -30, -15, -5, -1, -10, -50, 0], [0, -30, -15, -5, -1, -10, -30, 0], [0, -30, -15, -5, -5, -1, -2, 0], [0, -30, -15, -5, -5, -1, -1, 0]], [[0, -60, -10, -10, -5, -5, -10, 0], [0, -60, -10, -10, -5, -5, -10, 0], [0, -60, -10, -10, -5, -5, -30, 0], [0, -60, -10, -10, -5, -50, -90, 0], [0, -60, -10, -10, -5, -50, -90, 0], [0, -60, -10, -10, -5, -5, -30, 0], [0, -60, -10, -10, -5, -5, -10, 0], [0, -60, -10, -10, -5, -5, -10, 0]], [[0, -30, -5, -5, -5, -1, -1, 0], [0, -30, -5, -5, -5, -1, -2, 0], [0, -30, -15, -5, -1, -10, -30, 0], [0, -30, -15, -5, -1, -10, -50, 0], [0, -30, -15, -5, -1, -10, -50, 0], [0, -30, -15, -5, -1, -10, -30, 0], [0, -30, -5, -5, -5, -1, -2, 0], [0, -30, -5, -5, -5, -1, -1, 0]], [[0, 5, 5, 5, -5, -5, -10, 0], [0, 5, 5, 5, -5, -5, -10, 0], [0, 5, 5, 5, -5, -5, -30, 0], [0, 5, 5, 5, -5, -5, -90, 0], [0, 5, 5, 5, -5, -5, -90, 0], [0, 5, 5, 5, -5, -5, -30, 0], [0, 5, 5, 5, -5, -5, -10, 0], [0, 5, 5, 5, -5, -5, -10, 0]], [[0, 0, -5, -1, -1, -1, -1, 0], [0, 0, -5, -1, -1, -1, -1, 0], [0, 0, -5, -1, -1, -1, -1, 0], [0, 0, -5, -1, -1, -1, -1, 0], [0, 0, -5, -1, -1, -1, -1, 0], [0, 0, -5, -1, -1, -1, -1, 0], [0, 0, -5, -1, -1, -1, -1, 0], [0, 0, -5, -1, -1, -1, -1, 0]], [[0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0]], [[0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0]], [[0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0]], [[0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0], [0, -5, -3, -1, -1, -1, -1, 0]], [[0, -20, -5, -1, -1, -1, -1, 0], [0, -20, -5, -1, -1, -1, -1, 0], [0, -20, -5, -1, -1, -1, -1, 0], [0, -20, -5, -1, -1, -1, -1, 0], [0, -20, -5, -1, -1, -1, -1, 0], [0, -20, -5, -1, -1, -1, -1, 0], [0, -20, -5, -1, -1, -1, -1, 0], [0, -20, -5, -1, -1, -1, -1, 0]]]];
// its not actually distance to corner anymore but kinda
pub static DISTANCE_TO_CORNER: [[i64; 8]; 8] = [[0, 1, 2, 3, 3, 2, 1, 0], [1, 3, 4, 4, 4, 4, 3, 1], [2, 4, 6, 6, 6, 6, 4, 2], [3, 4, 6, 8, 8, 6, 4, 3], [3, 4, 6, 8, 8, 6, 4, 3], [2, 4, 6, 6, 6, 6, 4, 2], [1, 3, 4, 4, 4, 4, 3, 1], [0, 1, 2, 3, 3, 2, 1, 0]];
pub static KING_DISTANCE: [[[[i64; 8]; 8]; 8]; 8] = [[[[0, 2, 4, 6, 8, 10, 12, 14], [2, 3, 5, 7, 9, 11, 13, 15], [4, 5, 6, 8, 10, 12, 14, 16], [6, 7, 8, 9, 11, 13, 15, 17], [8, 9, 10, 11, 12, 14, 16, 18], [10, 11, 12, 13, 14, 15, 17, 19], [12, 13, 14, 15, 16, 17, 18, 20], [14, 15, 16, 17, 18, 19, 20, 21]], [[2, 0, 2, 4, 6, 8, 10, 12], [3, 2, 3, 5, 7, 9, 11, 13], [5, 4, 5, 6, 8, 10, 12, 14], [7, 6, 7, 8, 9, 11, 13, 15], [9, 8, 9, 10, 11, 12, 14, 16], [11, 10, 11, 12, 13, 14, 15, 17], [13, 12, 13, 14, 15, 16, 17, 18], [15, 14, 15, 16, 17, 18, 19, 20]], [[4, 2, 0, 2, 4, 6, 8, 10], [5, 3, 2, 3, 5, 7, 9, 11], [6, 5, 4, 5, 6, 8, 10, 12], [8, 7, 6, 7, 8, 9, 11, 13], [10, 9, 8, 9, 10, 11, 12, 14], [12, 11, 10, 11, 12, 13, 14, 15], [14, 13, 12, 13, 14, 15, 16, 17], [16, 15, 14, 15, 16, 17, 18, 19]], [[6, 4, 2, 0, 2, 4, 6, 8], [7, 5, 3, 2, 3, 5, 7, 9], [8, 6, 5, 4, 5, 6, 8, 10], [9, 8, 7, 6, 7, 8, 9, 11], [11, 10, 9, 8, 9, 10, 11, 12], [13, 12, 11, 10, 11, 12, 13, 14], [15, 14, 13, 12, 13, 14, 15, 16], [17, 16, 15, 14, 15, 16, 17, 18]], [[8, 6, 4, 2, 0, 2, 4, 6], [9, 7, 5, 3, 2, 3, 5, 7], [10, 8, 6, 5, 4, 5, 6, 8], [11, 9, 8, 7, 6, 7, 8, 9], [12, 11, 10, 9, 8, 9, 10, 11], [14, 13, 12, 11, 10, 11, 12, 13], [16, 15, 14, 13, 12, 13, 14, 15], [18, 17, 16, 15, 14, 15, 16, 17]], [[10, 8, 6, 4, 2, 0, 2, 4], [11, 9, 7, 5, 3, 2, 3, 5], [12, 10, 8, 6, 5, 4, 5, 6], [13, 11, 9, 8, 7, 6, 7, 8], [14, 12, 11, 10, 9, 8, 9, 10], [15, 14, 13, 12, 11, 10, 11, 12], [17, 16, 15, 14, 13, 12, 13, 14], [19, 18, 17, 16, 15, 14, 15, 16]], [[12, 10, 8, 6, 4, 2, 0, 2], [13, 11, 9, 7, 5, 3, 2, 3], [14, 12, 10, 8, 6, 5, 4, 5], [15, 13, 11, 9, 8, 7, 6, 7], [16, 14, 12, 11, 10, 9, 8, 9], [17, 15, 14, 13, 12, 11, 10, 11], [18, 17, 16, 15, 14, 13, 12, 13], [20, 19, 18, 17, 16, 15, 14, 15]], [[14, 12, 10, 8, 6, 4, 2, 0], [15, 13, 11, 9, 7, 5, 3, 2], [16, 14, 12, 10, 8, 6, 5, 4], [17, 15, 13, 11, 9, 8, 7, 6], [18, 16, 14, 12, 11, 10, 9, 8], [19, 17, 15, 14, 13, 12, 11, 10], [20, 18, 17, 16, 15, 14, 13, 12], [21, 20, 19, 18, 17, 16, 15, 14]]], [[[2, 3, 5, 7, 9, 11, 13, 15], [0, 2, 4, 6, 8, 10, 12, 14], [2, 3, 5, 7, 9, 11, 13, 15], [4, 5, 6, 8, 10, 12, 14, 16], [6, 7, 8, 9, 11, 13, 15, 17], [8, 9, 10, 11, 12, 14, 16, 18], [10, 11, 12, 13, 14, 15, 17, 19], [12, 13, 14, 15, 16, 17, 18, 20]], [[3, 2, 3, 5, 7, 9, 11, 13], [2, 0, 2, 4, 6, 8, 10, 12], [3, 2, 3, 5, 7, 9, 11, 13], [5, 4, 5, 6, 8, 10, 12, 14], [7, 6, 7, 8, 9, 11, 13, 15], [9, 8, 9, 10, 11, 12, 14, 16], [11, 10, 11, 12, 13, 14, 15, 17], [13, 12, 13, 14, 15, 16, 17, 18]], [[5, 3, 2, 3, 5, 7, 9, 11], [4, 2, 0, 2, 4, 6, 8, 10], [5, 3, 2, 3, 5, 7, 9, 11], [6, 5, 4, 5, 6, 8, 10, 12], [8, 7, 6, 7, 8, 9, 11, 13], [10, 9, 8, 9, 10, 11, 12, 14], [12, 11, 10, 11, 12, 13, 14, 15], [14, 13, 12, 13, 14, 15, 16, 17]], [[7, 5, 3, 2, 3, 5, 7, 9], [6, 4, 2, 0, 2, 4, 6, 8], [7, 5, 3, 2, 3, 5, 7, 9], [8, 6, 5, 4, 5, 6, 8, 10], [9, 8, 7, 6, 7, 8, 9, 11], [11, 10, 9, 8, 9, 10, 11, 12], [13, 12, 11, 10, 11, 12, 13, 14], [15, 14, 13, 12, 13, 14, 15, 16]], [[9, 7, 5, 3, 2, 3, 5, 7], [8, 6, 4, 2, 0, 2, 4, 6], [9, 7, 5, 3, 2, 3, 5, 7], [10, 8, 6, 5, 4, 5, 6, 8], [11, 9, 8, 7, 6, 7, 8, 9], [12, 11, 10, 9, 8, 9, 10, 11], [14, 13, 12, 11, 10, 11, 12, 13], [16, 15, 14, 13, 12, 13, 14, 15]], [[11, 9, 7, 5, 3, 2, 3, 5], [10, 8, 6, 4, 2, 0, 2, 4], [11, 9, 7, 5, 3, 2, 3, 5], [12, 10, 8, 6, 5, 4, 5, 6], [13, 11, 9, 8, 7, 6, 7, 8], [14, 12, 11, 10, 9, 8, 9, 10], [15, 14, 13, 12, 11, 10, 11, 12], [17, 16, 15, 14, 13, 12, 13, 14]], [[13, 11, 9, 7, 5, 3, 2, 3], [12, 10, 8, 6, 4, 2, 0, 2], [13, 11, 9, 7, 5, 3, 2, 3], [14, 12, 10, 8, 6, 5, 4, 5], [15, 13, 11, 9, 8, 7, 6, 7], [16, 14, 12, 11, 10, 9, 8, 9], [17, 15, 14, 13, 12, 11, 10, 11], [18, 17, 16, 15, 14, 13, 12, 13]], [[15, 13, 11, 9, 7, 5, 3, 2], [14, 12, 10, 8, 6, 4, 2, 0], [15, 13, 11, 9, 7, 5, 3, 2], [16, 14, 12, 10, 8, 6, 5, 4], [17, 15, 13, 11, 9, 8, 7, 6], [18, 16, 14, 12, 11, 10, 9, 8], [19, 17, 15, 14, 13, 12, 11, 10], [20, 18, 17, 16, 15, 14, 13, 12]]], [[[4, 5, 6, 8, 10, 12, 14, 16], [2, 3, 5, 7, 9, 11, 13, 15], [0, 2, 4, 6, 8, 10, 12, 14], [2, 3, 5, 7, 9, 11, 13, 15], [4, 5, 6, 8, 10, 12, 14, 16], [6, 7, 8, 9, 11, 13, 15, 17], [8, 9, 10, 11, 12, 14, 16, 18], [10, 11, 12, 13, 14, 15, 17, 19]], [[5, 4, 5, 6, 8, 10, 12, 14], [3, 2, 3, 5, 7, 9, 11, 13], [2, 0, 2, 4, 6, 8, 10, 12], [3, 2, 3, 5, 7, 9, 11, 13], [5, 4, 5, 6, 8, 10, 12, 14], [7, 6, 7, 8, 9, 11, 13, 15], [9, 8, 9, 10, 11, 12, 14, 16], [11, 10, 11, 12, 13, 14, 15, 17]], [[6, 5, 4, 5, 6, 8, 10, 12], [5, 3, 2, 3, 5, 7, 9, 11], [4, 2, 0, 2, 4, 6, 8, 10], [5, 3, 2, 3, 5, 7, 9, 11], [6, 5, 4, 5, 6, 8, 10, 12], [8, 7, 6, 7, 8, 9, 11, 13], [10, 9, 8, 9, 10, 11, 12, 14], [12, 11, 10, 11, 12, 13, 14, 15]], [[8, 6, 5, 4, 5, 6, 8, 10], [7, 5, 3, 2, 3, 5, 7, 9], [6, 4, 2, 0, 2, 4, 6, 8], [7, 5, 3, 2, 3, 5, 7, 9], [8, 6, 5, 4, 5, 6, 8, 10], [9, 8, 7, 6, 7, 8, 9, 11], [11, 10, 9, 8, 9, 10, 11, 12], [13, 12, 11, 10, 11, 12, 13, 14]], [[10, 8, 6, 5, 4, 5, 6, 8], [9, 7, 5, 3, 2, 3, 5, 7], [8, 6, 4, 2, 0, 2, 4, 6], [9, 7, 5, 3, 2, 3, 5, 7], [10, 8, 6, 5, 4, 5, 6, 8], [11, 9, 8, 7, 6, 7, 8, 9], [12, 11, 10, 9, 8, 9, 10, 11], [14, 13, 12, 11, 10, 11, 12, 13]], [[12, 10, 8, 6, 5, 4, 5, 6], [11, 9, 7, 5, 3, 2, 3, 5], [10, 8, 6, 4, 2, 0, 2, 4], [11, 9, 7, 5, 3, 2, 3, 5], [12, 10, 8, 6, 5, 4, 5, 6], [13, 11, 9, 8, 7, 6, 7, 8], [14, 12, 11, 10, 9, 8, 9, 10], [15, 14, 13, 12, 11, 10, 11, 12]], [[14, 12, 10, 8, 6, 5, 4, 5], [13, 11, 9, 7, 5, 3, 2, 3], [12, 10, 8, 6, 4, 2, 0, 2], [13, 11, 9, 7, 5, 3, 2, 3], [14, 12, 10, 8, 6, 5, 4, 5], [15, 13, 11, 9, 8, 7, 6, 7], [16, 14, 12, 11, 10, 9, 8, 9], [17, 15, 14, 13, 12, 11, 10, 11]], [[16, 14, 12, 10, 8, 6, 5, 4], [15, 13, 11, 9, 7, 5, 3, 2], [14, 12, 10, 8, 6, 4, 2, 0], [15, 13, 11, 9, 7, 5, 3, 2], [16, 14, 12, 10, 8, 6, 5, 4], [17, 15, 13, 11, 9, 8, 7, 6], [18, 16, 14, 12, 11, 10, 9, 8], [19, 17, 15, 14, 13, 12, 11, 10]]], [[[6, 7, 8, 9, 11, 13, 15, 17], [4, 5, 6, 8, 10, 12, 14, 16], [2, 3, 5, 7, 9, 11, 13, 15], [0, 2, 4, 6, 8, 10, 12, 14], [2, 3, 5, 7, 9, 11, 13, 15], [4, 5, 6, 8, 10, 12, 14, 16], [6, 7, 8, 9, 11, 13, 15, 17], [8, 9, 10, 11, 12, 14, 16, 18]], [[7, 6, 7, 8, 9, 11, 13, 15], [5, 4, 5, 6, 8, 10, 12, 14], [3, 2, 3, 5, 7, 9, 11, 13], [2, 0, 2, 4, 6, 8, 10, 12], [3, 2, 3, 5, 7, 9, 11, 13], [5, 4, 5, 6, 8, 10, 12, 14], [7, 6, 7, 8, 9, 11, 13, 15], [9, 8, 9, 10, 11, 12, 14, 16]], [[8, 7, 6, 7, 8, 9, 11, 13], [6, 5, 4, 5, 6, 8, 10, 12], [5, 3, 2, 3, 5, 7, 9, 11], [4, 2, 0, 2, 4, 6, 8, 10], [5, 3, 2, 3, 5, 7, 9, 11], [6, 5, 4, 5, 6, 8, 10, 12], [8, 7, 6, 7, 8, 9, 11, 13], [10, 9, 8, 9, 10, 11, 12, 14]], [[9, 8, 7, 6, 7, 8, 9, 11], [8, 6, 5, 4, 5, 6, 8, 10], [7, 5, 3, 2, 3, 5, 7, 9], [6, 4, 2, 0, 2, 4, 6, 8], [7, 5, 3, 2, 3, 5, 7, 9], [8, 6, 5, 4, 5, 6, 8, 10], [9, 8, 7, 6, 7, 8, 9, 11], [11, 10, 9, 8, 9, 10, 11, 12]], [[11, 9, 8, 7, 6, 7, 8, 9], [10, 8, 6, 5, 4, 5, 6, 8], [9, 7, 5, 3, 2, 3, 5, 7], [8, 6, 4, 2, 0, 2, 4, 6], [9, 7, 5, 3, 2, 3, 5, 7], [10, 8, 6, 5, 4, 5, 6, 8], [11, 9, 8, 7, 6, 7, 8, 9], [12, 11, 10, 9, 8, 9, 10, 11]], [[13, 11, 9, 8, 7, 6, 7, 8], [12, 10, 8, 6, 5, 4, 5, 6], [11, 9, 7, 5, 3, 2, 3, 5], [10, 8, 6, 4, 2, 0, 2, 4], [11, 9, 7, 5, 3, 2, 3, 5], [12, 10, 8, 6, 5, 4, 5, 6], [13, 11, 9, 8, 7, 6, 7, 8], [14, 12, 11, 10, 9, 8, 9, 10]], [[15, 13, 11, 9, 8, 7, 6, 7], [14, 12, 10, 8, 6, 5, 4, 5], [13, 11, 9, 7, 5, 3, 2, 3], [12, 10, 8, 6, 4, 2, 0, 2], [13, 11, 9, 7, 5, 3, 2, 3], [14, 12, 10, 8, 6, 5, 4, 5], [15, 13, 11, 9, 8, 7, 6, 7], [16, 14, 12, 11, 10, 9, 8, 9]], [[17, 15, 13, 11, 9, 8, 7, 6], [16, 14, 12, 10, 8, 6, 5, 4], [15, 13, 11, 9, 7, 5, 3, 2], [14, 12, 10, 8, 6, 4, 2, 0], [15, 13, 11, 9, 7, 5, 3, 2], [16, 14, 12, 10, 8, 6, 5, 4], [17, 15, 13, 11, 9, 8, 7, 6], [18, 16, 14, 12, 11, 10, 9, 8]]], [[[8, 9, 10, 11, 12, 14, 16, 18], [6, 7, 8, 9, 11, 13, 15, 17], [4, 5, 6, 8, 10, 12, 14, 16], [2, 3, 5, 7, 9, 11, 13, 15], [0, 2, 4, 6, 8, 10, 12, 14], [2, 3, 5, 7, 9, 11, 13, 15], [4, 5, 6, 8, 10, 12, 14, 16], [6, 7, 8, 9, 11, 13, 15, 17]], [[9, 8, 9, 10, 11, 12, 14, 16], [7, 6, 7, 8, 9, 11, 13, 15], [5, 4, 5, 6, 8, 10, 12, 14], [3, 2, 3, 5, 7, 9, 11, 13], [2, 0, 2, 4, 6, 8, 10, 12], [3, 2, 3, 5, 7, 9, 11, 13], [5, 4, 5, 6, 8, 10, 12, 14], [7, 6, 7, 8, 9, 11, 13, 15]], [[10, 9, 8, 9, 10, 11, 12, 14], [8, 7, 6, 7, 8, 9, 11, 13], [6, 5, 4, 5, 6, 8, 10, 12], [5, 3, 2, 3, 5, 7, 9, 11], [4, 2, 0, 2, 4, 6, 8, 10], [5, 3, 2, 3, 5, 7, 9, 11], [6, 5, 4, 5, 6, 8, 10, 12], [8, 7, 6, 7, 8, 9, 11, 13]], [[11, 10, 9, 8, 9, 10, 11, 12], [9, 8, 7, 6, 7, 8, 9, 11], [8, 6, 5, 4, 5, 6, 8, 10], [7, 5, 3, 2, 3, 5, 7, 9], [6, 4, 2, 0, 2, 4, 6, 8], [7, 5, 3, 2, 3, 5, 7, 9], [8, 6, 5, 4, 5, 6, 8, 10], [9, 8, 7, 6, 7, 8, 9, 11]], [[12, 11, 10, 9, 8, 9, 10, 11], [11, 9, 8, 7, 6, 7, 8, 9], [10, 8, 6, 5, 4, 5, 6, 8], [9, 7, 5, 3, 2, 3, 5, 7], [8, 6, 4, 2, 0, 2, 4, 6], [9, 7, 5, 3, 2, 3, 5, 7], [10, 8, 6, 5, 4, 5, 6, 8], [11, 9, 8, 7, 6, 7, 8, 9]], [[14, 12, 11, 10, 9, 8, 9, 10], [13, 11, 9, 8, 7, 6, 7, 8], [12, 10, 8, 6, 5, 4, 5, 6], [11, 9, 7, 5, 3, 2, 3, 5], [10, 8, 6, 4, 2, 0, 2, 4], [11, 9, 7, 5, 3, 2, 3, 5], [12, 10, 8, 6, 5, 4, 5, 6], [13, 11, 9, 8, 7, 6, 7, 8]], [[16, 14, 12, 11, 10, 9, 8, 9], [15, 13, 11, 9, 8, 7, 6, 7], [14, 12, 10, 8, 6, 5, 4, 5], [13, 11, 9, 7, 5, 3, 2, 3], [12, 10, 8, 6, 4, 2, 0, 2], [13, 11, 9, 7, 5, 3, 2, 3], [14, 12, 10, 8, 6, 5, 4, 5], [15, 13, 11, 9, 8, 7, 6, 7]], [[18, 16, 14, 12, 11, 10, 9, 8], [17, 15, 13, 11, 9, 8, 7, 6], [16, 14, 12, 10, 8, 6, 5, 4], [15, 13, 11, 9, 7, 5, 3, 2], [14, 12, 10, 8, 6, 4, 2, 0], [15, 13, 11, 9, 7, 5, 3, 2], [16, 14, 12, 10, 8, 6, 5, 4], [17, 15, 13, 11, 9, 8, 7, 6]]], [[[10, 11, 12, 13, 14, 15, 17, 19], [8, 9, 10, 11, 12, 14, 16, 18], [6, 7, 8, 9, 11, 13, 15, 17], [4, 5, 6, 8, 10, 12, 14, 16], [2, 3, 5, 7, 9, 11, 13, 15], [0, 2, 4, 6, 8, 10, 12, 14], [2, 3, 5, 7, 9, 11, 13, 15], [4, 5, 6, 8, 10, 12, 14, 16]], [[11, 10, 11, 12, 13, 14, 15, 17], [9, 8, 9, 10, 11, 12, 14, 16], [7, 6, 7, 8, 9, 11, 13, 15], [5, 4, 5, 6, 8, 10, 12, 14], [3, 2, 3, 5, 7, 9, 11, 13], [2, 0, 2, 4, 6, 8, 10, 12], [3, 2, 3, 5, 7, 9, 11, 13], [5, 4, 5, 6, 8, 10, 12, 14]], [[12, 11, 10, 11, 12, 13, 14, 15], [10, 9, 8, 9, 10, 11, 12, 14], [8, 7, 6, 7, 8, 9, 11, 13], [6, 5, 4, 5, 6, 8, 10, 12], [5, 3, 2, 3, 5, 7, 9, 11], [4, 2, 0, 2, 4, 6, 8, 10], [5, 3, 2, 3, 5, 7, 9, 11], [6, 5, 4, 5, 6, 8, 10, 12]], [[13, 12, 11, 10, 11, 12, 13, 14], [11, 10, 9, 8, 9, 10, 11, 12], [9, 8, 7, 6, 7, 8, 9, 11], [8, 6, 5, 4, 5, 6, 8, 10], [7, 5, 3, 2, 3, 5, 7, 9], [6, 4, 2, 0, 2, 4, 6, 8], [7, 5, 3, 2, 3, 5, 7, 9], [8, 6, 5, 4, 5, 6, 8, 10]], [[14, 13, 12, 11, 10, 11, 12, 13], [12, 11, 10, 9, 8, 9, 10, 11], [11, 9, 8, 7, 6, 7, 8, 9], [10, 8, 6, 5, 4, 5, 6, 8], [9, 7, 5, 3, 2, 3, 5, 7], [8, 6, 4, 2, 0, 2, 4, 6], [9, 7, 5, 3, 2, 3, 5, 7], [10, 8, 6, 5, 4, 5, 6, 8]], [[15, 14, 13, 12, 11, 10, 11, 12], [14, 12, 11, 10, 9, 8, 9, 10], [13, 11, 9, 8, 7, 6, 7, 8], [12, 10, 8, 6, 5, 4, 5, 6], [11, 9, 7, 5, 3, 2, 3, 5], [10, 8, 6, 4, 2, 0, 2, 4], [11, 9, 7, 5, 3, 2, 3, 5], [12, 10, 8, 6, 5, 4, 5, 6]], [[17, 15, 14, 13, 12, 11, 10, 11], [16, 14, 12, 11, 10, 9, 8, 9], [15, 13, 11, 9, 8, 7, 6, 7], [14, 12, 10, 8, 6, 5, 4, 5], [13, 11, 9, 7, 5, 3, 2, 3], [12, 10, 8, 6, 4, 2, 0, 2], [13, 11, 9, 7, 5, 3, 2, 3], [14, 12, 10, 8, 6, 5, 4, 5]], [[19, 17, 15, 14, 13, 12, 11, 10], [18, 16, 14, 12, 11, 10, 9, 8], [17, 15, 13, 11, 9, 8, 7, 6], [16, 14, 12, 10, 8, 6, 5, 4], [15, 13, 11, 9, 7, 5, 3, 2], [14, 12, 10, 8, 6, 4, 2, 0], [15, 13, 11, 9, 7, 5, 3, 2], [16, 14, 12, 10, 8, 6, 5, 4]]], [[[12, 13, 14, 15, 16, 17, 18, 20], [10, 11, 12, 13, 14, 15, 17, 19], [8, 9, 10, 11, 12, 14, 16, 18], [6, 7, 8, 9, 11, 13, 15, 17], [4, 5, 6, 8, 10, 12, 14, 16], [2, 3, 5, 7, 9, 11, 13, 15], [0, 2, 4, 6, 8, 10, 12, 14], [2, 3, 5, 7, 9, 11, 13, 15]], [[13, 12, 13, 14, 15, 16, 17, 18], [11, 10, 11, 12, 13, 14, 15, 17], [9, 8, 9, 10, 11, 12, 14, 16], [7, 6, 7, 8, 9, 11, 13, 15], [5, 4, 5, 6, 8, 10, 12, 14], [3, 2, 3, 5, 7, 9, 11, 13], [2, 0, 2, 4, 6, 8, 10, 12], [3, 2, 3, 5, 7, 9, 11, 13]], [[14, 13, 12, 13, 14, 15, 16, 17], [12, 11, 10, 11, 12, 13, 14, 15], [10, 9, 8, 9, 10, 11, 12, 14], [8, 7, 6, 7, 8, 9, 11, 13], [6, 5, 4, 5, 6, 8, 10, 12], [5, 3, 2, 3, 5, 7, 9, 11], [4, 2, 0, 2, 4, 6, 8, 10], [5, 3, 2, 3, 5, 7, 9, 11]], [[15, 14, 13, 12, 13, 14, 15, 16], [13, 12, 11, 10, 11, 12, 13, 14], [11, 10, 9, 8, 9, 10, 11, 12], [9, 8, 7, 6, 7, 8, 9, 11], [8, 6, 5, 4, 5, 6, 8, 10], [7, 5, 3, 2, 3, 5, 7, 9], [6, 4, 2, 0, 2, 4, 6, 8], [7, 5, 3, 2, 3, 5, 7, 9]], [[16, 15, 14, 13, 12, 13, 14, 15], [14, 13, 12, 11, 10, 11, 12, 13], [12, 11, 10, 9, 8, 9, 10, 11], [11, 9, 8, 7, 6, 7, 8, 9], [10, 8, 6, 5, 4, 5, 6, 8], [9, 7, 5, 3, 2, 3, 5, 7], [8, 6, 4, 2, 0, 2, 4, 6], [9, 7, 5, 3, 2, 3, 5, 7]], [[17, 16, 15, 14, 13, 12, 13, 14], [15, 14, 13, 12, 11, 10, 11, 12], [14, 12, 11, 10, 9, 8, 9, 10], [13, 11, 9, 8, 7, 6, 7, 8], [12, 10, 8, 6, 5, 4, 5, 6], [11, 9, 7, 5, 3, 2, 3, 5], [10, 8, 6, 4, 2, 0, 2, 4], [11, 9, 7, 5, 3, 2, 3, 5]], [[18, 17, 16, 15, 14, 13, 12, 13], [17, 15, 14, 13, 12, 11, 10, 11], [16, 14, 12, 11, 10, 9, 8, 9], [15, 13, 11, 9, 8, 7, 6, 7], [14, 12, 10, 8, 6, 5, 4, 5], [13, 11, 9, 7, 5, 3, 2, 3], [12, 10, 8, 6, 4, 2, 0, 2], [13, 11, 9, 7, 5, 3, 2, 3]], [[20, 18, 17, 16, 15, 14, 13, 12], [19, 17, 15, 14, 13, 12, 11, 10], [18, 16, 14, 12, 11, 10, 9, 8], [17, 15, 13, 11, 9, 8, 7, 6], [16, 14, 12, 10, 8, 6, 5, 4], [15, 13, 11, 9, 7, 5, 3, 2], [14, 12, 10, 8, 6, 4, 2, 0], [15, 13, 11, 9, 7, 5, 3, 2]]], [[[14, 15, 16, 17, 18, 19, 20, 21], [12, 13, 14, 15, 16, 17, 18, 20], [10, 11, 12, 13, 14, 15, 17, 19], [8, 9, 10, 11, 12, 14, 16, 18], [6, 7, 8, 9, 11, 13, 15, 17], [4, 5, 6, 8, 10, 12, 14, 16], [2, 3, 5, 7, 9, 11, 13, 15], [0, 2, 4, 6, 8, 10, 12, 14]], [[15, 14, 15, 16, 17, 18, 19, 20], [13, 12, 13, 14, 15, 16, 17, 18], [11, 10, 11, 12, 13, 14, 15, 17], [9, 8, 9, 10, 11, 12, 14, 16], [7, 6, 7, 8, 9, 11, 13, 15], [5, 4, 5, 6, 8, 10, 12, 14], [3, 2, 3, 5, 7, 9, 11, 13], [2, 0, 2, 4, 6, 8, 10, 12]], [[16, 15, 14, 15, 16, 17, 18, 19], [14, 13, 12, 13, 14, 15, 16, 17], [12, 11, 10, 11, 12, 13, 14, 15], [10, 9, 8, 9, 10, 11, 12, 14], [8, 7, 6, 7, 8, 9, 11, 13], [6, 5, 4, 5, 6, 8, 10, 12], [5, 3, 2, 3, 5, 7, 9, 11], [4, 2, 0, 2, 4, 6, 8, 10]], [[17, 16, 15, 14, 15, 16, 17, 18], [15, 14, 13, 12, 13, 14, 15, 16], [13, 12, 11, 10, 11, 12, 13, 14], [11, 10, 9, 8, 9, 10, 11, 12], [9, 8, 7, 6, 7, 8, 9, 11], [8, 6, 5, 4, 5, 6, 8, 10], [7, 5, 3, 2, 3, 5, 7, 9], [6, 4, 2, 0, 2, 4, 6, 8]], [[18, 17, 16, 15, 14, 15, 16, 17], [16, 15, 14, 13, 12, 13, 14, 15], [14, 13, 12, 11, 10, 11, 12, 13], [12, 11, 10, 9, 8, 9, 10, 11], [11, 9, 8, 7, 6, 7, 8, 9], [10, 8, 6, 5, 4, 5, 6, 8], [9, 7, 5, 3, 2, 3, 5, 7], [8, 6, 4, 2, 0, 2, 4, 6]], [[19, 18, 17, 16, 15, 14, 15, 16], [17, 16, 15, 14, 13, 12, 13, 14], [15, 14, 13, 12, 11, 10, 11, 12], [14, 12, 11, 10, 9, 8, 9, 10], [13, 11, 9, 8, 7, 6, 7, 8], [12, 10, 8, 6, 5, 4, 5, 6], [11, 9, 7, 5, 3, 2, 3, 5], [10, 8, 6, 4, 2, 0, 2, 4]], [[20, 19, 18, 17, 16, 15, 14, 15], [18, 17, 16, 15, 14, 13, 12, 13], [17, 15, 14, 13, 12, 11, 10, 11], [16, 14, 12, 11, 10, 9, 8, 9], [15, 13, 11, 9, 8, 7, 6, 7], [14, 12, 10, 8, 6, 5, 4, 5], [13, 11, 9, 7, 5, 3, 2, 3], [12, 10, 8, 6, 4, 2, 0, 2]], [[21, 20, 19, 18, 17, 16, 15, 14], [20, 18, 17, 16, 15, 14, 13, 12], [19, 17, 15, 14, 13, 12, 11, 10], [18, 16, 14, 12, 11, 10, 9, 8], [17, 15, 13, 11, 9, 8, 7, 6], [16, 14, 12, 10, 8, 6, 5, 4], [15, 13, 11, 9, 7, 5, 3, 2], [14, 12, 10, 8, 6, 4, 2, 0]]]];
// isolated, backwards, stacked (doubled, tripled), passed (when enemy has passer), outcast
pub static PAWN_PENALTIES: [i64; 5] = [20, 25, 15, 50, 25];


pub struct SearchArgs<'a> {
    reuser: VectorReuser<Move>,
    cache: HashMapReuser<u64, i64>,
    hasher: &'a Hasher,
    fuck_moves: Vec<BestMoves>,
    marry_moves: [i64; 896],
    kill_moves: [usize; 896],
    pawn_structure_cache: HashMap<u64, i64>,
    previous_best_moves: HashMapReuser<u64, usize>
}

impl<'a> SearchArgs<'a> {
    pub fn new(expected_max_depth: usize, expected_normal_depth: usize, hasher: &Hasher) -> SearchArgs {
        SearchArgs {
            reuser: VectorReuser::with_capacity2d(expected_max_depth, 500),
            cache: HashMapReuser::with_capacity2d(expected_normal_depth, 1_000_000),
            hasher,
            fuck_moves: ([(); 100].iter().map(|_| BestMoves::new())).collect(),
            marry_moves: [0; 896],
            kill_moves: [4096; 896],
            pawn_structure_cache: HashMap::with_capacity(100_000),
            previous_best_moves: HashMapReuser::with_capacity2d(2, 10_000_000)
        }
    }
    pub fn clear(&mut self) {
        self.cache.clear();
        // for i in self.fuck_moves.iter_mut() {
        //     i.moves[0] = 4096;
        //     i.moves[1] = 4096;
        //     i.moves[2] = 4096;
        // }
    }
}

impl Move {
    pub fn guesstimate_delta(&self) -> i64 {
        // uses the fact that PIECE_SQUARE_TABLE is symmetrical for both sides (at least it should be)
        match *self {
            Move::PawnPromotion(a, b, c, d, k, p) => {
                PIECE_SQUARE_TABLE[p as usize][c][d] - PIECE_SQUARE_TABLE[1][a][b] + PIECE_DELTA[k as usize] + PIECE_DELTA[p as usize]
            },
            Move::PawnCapture(a, b, c, d, p) => {
                PIECE_SQUARE_TABLE[1][c][d] - PIECE_SQUARE_TABLE[1][a][b] + PIECE_DELTA[p as usize]
            },
            Move::EnPassant(a, b, c, d, p) => {
                PIECE_SQUARE_TABLE[1][c][d] - PIECE_SQUARE_TABLE[1][a][b] + PIECE_DELTA[p as usize]
            },
            Move::KnightMove(a, b, c, d, p) => {
                PIECE_SQUARE_TABLE[2][c][d] - PIECE_SQUARE_TABLE[2][a][b] + PIECE_DELTA[p as usize]
            },
            Move::BishopMove(a, b, c, d, p) => {
                PIECE_SQUARE_TABLE[3][c][d] - PIECE_SQUARE_TABLE[3][a][b] + PIECE_DELTA[p as usize]
            },
            Move::RookMove(a, b, c, d, p) => {
                PIECE_SQUARE_TABLE[4][c][d] - PIECE_SQUARE_TABLE[4][a][b] + PIECE_DELTA[p as usize]
            },
            Move::QueenMove(a, b, c, d, p) => {
                PIECE_SQUARE_TABLE[5][c][d] - PIECE_SQUARE_TABLE[5][a][b] + PIECE_DELTA[p as usize]
            },
            Move::KingMove(a, b, c, d, p) => {
                PIECE_SQUARE_TABLE[6][c][d] - PIECE_SQUARE_TABLE[6][a][b] + PIECE_DELTA[p as usize]
            },
            Move::PawnPush(a, b, c, d) => {
                PIECE_SQUARE_TABLE[1][c][d] - PIECE_SQUARE_TABLE[1][a][b]
            },
            Move::TwoSquarePawnMove(a, b, c, d) => {
                PIECE_SQUARE_TABLE[1][c][d] - PIECE_SQUARE_TABLE[1][a][b]
            },
            Move::Castling(_, 4, _, 6) => 50,
            Move::Castling(..) => 40,
        }
    }
}

#[derive(Clone, Copy)]
struct KillYourself(*mut bool);

impl KillYourself {
    pub fn new(reference: &mut bool) -> KillYourself {
        KillYourself(reference)
    }
    pub fn contact_fuehrerbunker(&self) -> bool {
        unsafe {*self.0}
    }
    pub fn holocaust(&self) {
        unsafe {
            *self.0 = true;
        }
    }
    pub fn attempt(&self) {
        if unsafe {*self.0} {
            panic!("controlled panic");
        }
    }
}


unsafe impl Send for KillYourself {}

#[derive(Clone, Copy)]
pub struct HasherRef(pub *const Hasher);

impl HasherRef {
    pub unsafe fn new(hasher: &Hasher) -> HasherRef {
        HasherRef(hasher as *const _)
    }
}

unsafe impl Send for HasherRef {}

#[derive(Clone, Copy)]
pub struct PositionStorerRef(pub *mut PositionStorer);

impl PositionStorerRef {
    pub unsafe fn new(storer: &mut PositionStorer) -> PositionStorerRef {
        PositionStorerRef(storer as *mut _)
    }
}

unsafe impl Send for PositionStorerRef {}


pub fn compute(board: Board,
               hasher: HasherRef,
               prev_eval: i64,
               dedicated_time_ms: u64,
               output_channel: Sender<(i64, Option<Move>)>){
    let mut output = (prev_eval, None);
    // cia as compileriui pasakau "trust me bro"
    let search_args = unsafe {
        SearchArgs::new(100, MAX_DEPTH, &*hasher.0)
    };
    let vector = Vec::with_capacity(200);
    let mut kill_yourself = Pin::new(Box::new(false));
    let (sender, receiver) = sync::mpsc::channel();
    let suicide = KillYourself::new(&mut *kill_yourself);
    let kid = thread::spawn(move || {
        deepen_search_wrapper(search_args, vector, board, prev_eval, suicide, sender);
    });
    thread::sleep(Duration::from_millis(dedicated_time_ms));
    while let Ok(choice) = receiver.try_recv() {
        println!("choices: {:?}", choice);
        output = choice;
    }
    output_channel.send(output).unwrap();
    suicide.holocaust();
    kid.join();
}

fn deepen_search_wrapper(mut search_args: SearchArgs,
                         mut vector: Vec<Move>,
                         mut board: Board,
                         mut previous_eval: i64,
                         suicide: KillYourself,
                         channel: Sender<(i64, Option<Move>)>) {
    let mut chosen_move = None;
    for depth in 2..MAX_DEPTH {
        if suicide.contact_fuehrerbunker() {
            return;
        }
        println!("depth: {}", depth);
        (previous_eval, chosen_move) = deepen_search(
            &mut search_args,
            &mut vector,
            &mut board,
            previous_eval,
            depth,
            suicide
        );
        if chosen_move.is_none() {
            return;
        }
        channel.send((previous_eval, chosen_move)).unwrap();
        if previous_eval > 10_000_000 {
            return;
        }
    }
}

fn deepen_search(search_args: &mut SearchArgs,
                 vector: &mut Vec<Move>,
                 board: &mut Board,
                 previous_eval: i64,
                 mut depth: usize,
                 suicide: KillYourself) -> (i64, Option<Move>) {
    let mut alpha;
    let mut temp_score;
    let mut best_move = None;
    let mut min_index = 0;
    let mut max_index = 1;
    let mut expected_floor = previous_eval - HOPE_VALUES[min_index];
    let mut expected_ceiling = previous_eval + HOPE_VALUES[max_index];
    vector.clear();
    generate_into(board, vector);
    vector.sort_unstable_by_key(|a| -a.guesstimate_delta() - search_args.marry_moves[a.get_piece_hash(board)]);
    depth -= 1;
    'outer: loop {
        alpha = expected_floor;
        for i in vector.iter() {
            if suicide.contact_fuehrerbunker() {
                return (alpha, best_move)
            }
            board.make_move(i);
            if board.hung_king() {
                board.undo_move(i);
                continue;
            }
            temp_score = -search(
                search_args,
                board,
                depth,
                0,
                // expected_ceiling,
                // expected_floor,
                -expected_ceiling,
                -alpha,
                i.get_piece_hash(board),
                suicide);
            // println!("depth: {}, window: ({}, {}), eval: '{}', move: '{}'", depth + 1, expected_floor, expected_ceiling, temp_score, i.to_string());
            board.undo_move(i);
            if temp_score > alpha {
                if temp_score >= expected_ceiling {
                    max_index += 1;
                    expected_ceiling = previous_eval + HOPE_VALUES[max_index];
                    clear_cache(&mut search_args.cache, &mut search_args.fuck_moves, &mut search_args.marry_moves);
                    continue 'outer;
                }
                best_move = Some(i.clone());
                alpha = temp_score;
            }
        }
        if alpha <= expected_floor {
            min_index += 1;
            expected_floor = previous_eval - HOPE_VALUES[min_index];
            clear_cache(&mut search_args.cache, &mut search_args.fuck_moves, &mut search_args.marry_moves);
        } else {
            return (alpha, best_move);
        }
    }
}


// pub fn top_level_search_deprecated(board: &mut Board, initial_guess: i64, mut depth: usize, seed: u64) -> Option<Move> {
//     // per daug atminties nepasiallocatinsi 😋😋😋
//     let mut alpha;
//     let mut best_move = None;
//     let mut temp_score;
//     let mut min_index = 0;
//     let mut max_index = 0;
//     let mut vector = Vec::with_capacity(150);
//     let mut search_args =  SearchArgs::new(20, 10,seed);
//     let eval = board.debug_compute_evaluation(&search_args.hasher, &mut search_args.pawn_structure_cache);
//     println!("initial eval is {}", eval);
//     let mut expected_floor = initial_guess - HOPE_VALUES[min_index];
//     let mut expected_ceiling = initial_guess + HOPE_VALUES[max_index];
//     // let colourism = if board.white_to_move {1} else {-1};
//     generate_into(board, &mut vector);
//     vector.sort_unstable_by_key(|a| -a.guesstimate_delta() - search_args.marry_moves[a.get_piece_hash(board)]);
//     depth -= 1;
//     'outer: loop {
//         alpha = expected_floor;
//         for i in vector.iter() {
//             board.make_move(i);
//             temp_score = -search(
//                 &mut search_args,
//                 board,
//                 depth,
//                 0,
//                 // expected_ceiling,
//                 // expected_floor,
//                 -expected_ceiling,
//                 -alpha,
//                 i.get_piece_hash(board));
//             println!("window: ({}, {}), eval: '{}', move: '{}'", expected_floor, expected_ceiling, temp_score, i.to_string());
//             board.undo_move(i);
//             if temp_score > alpha {
//                 if temp_score >= expected_ceiling {
//                     max_index += 1;
//                     expected_ceiling = initial_guess + HOPE_VALUES[max_index];
//                     clear_cache(&mut search_args.cache, &mut search_args.fuck_moves, &mut search_args.marry_moves);
//                     continue 'outer;
//                 }
//                 best_move = Some(i.clone());
//                 alpha = temp_score;
//             }
//         }
//         if alpha <= expected_floor {
//             min_index += 1;
//             expected_floor = initial_guess - HOPE_VALUES[min_index];
//             clear_cache(&mut search_args.cache, &mut search_args.fuck_moves, &mut search_args.marry_moves);
//         } else {
//             return best_move;
//         }
//     }
// }


// TODO only check smarter looking moves when calculating my computer's moves (prob won't do this)
fn search(args: &mut SearchArgs,
          board: &mut Board,
          depth: usize,
          index: usize,
          mut alpha: i64,
          beta: i64,
          last_move: usize,
          suicide: KillYourself) -> i64 {
    // if suicide.contact_fuehrerbunker() {
    //     return alpha;
    // }
    suicide.attempt();
    let hash;
    // let mut move_hash;
    let mut temp_eval;
    let vector;
    let mut move_piece_hash;
    let mut hung_count = 0;
    let mut chosen_move = 4096;
    // hash = board.get_hash();
    hash = args.hasher.get_zobrist_hash(&board);
    if let Some(x) = args.cache.get(index, &hash) {
        return *x;
    }
    debug_assert!(board.evaluation.total_material >= 0, "{}", board.to_fen());
    match depth - index {
        0 => {
            temp_eval = quiescence_search(&mut args.reuser, true, board, index, alpha, beta, &args.hasher, &mut args.pawn_structure_cache);
            args.cache.insert(index, hash, temp_eval);
            return temp_eval;
        },
        1 => {
            temp_eval = quiescence_search(&mut args.reuser, true, board, index, alpha, beta, &args.hasher, &mut args.pawn_structure_cache);
            if temp_eval + DISAPPOINTMENT_VALUES[0] < alpha {
                return temp_eval;
            }
        },
        2 => {
            temp_eval = quiescence_search(&mut args.reuser, true, board, index, alpha, beta, &args.hasher, &mut args.pawn_structure_cache);
            if temp_eval + DISAPPOINTMENT_VALUES[1] < alpha {
                return temp_eval;
            }
        },
        _ => ()
    }
    unsafe {
        vector = &mut(*args.reuser.get_vector_pointer(index));
    }
    if let Some(i) = get_previous_best_move(board, &mut args.previous_best_moves, index, &hash) {
        board.make_move(&i);
        if board.hung_king() {
            board.undo_move(&i);
        } else {
            move_piece_hash = i.get_piece_hash(board);
            temp_eval = -search(args, board, depth, index + 1, -beta, -alpha, move_piece_hash, suicide);
            board.undo_move(&i);
            if temp_eval > alpha {
                if temp_eval >= beta {
                    if !i.is_capture() {
                        args.marry_moves[move_piece_hash] += 2i64.pow((depth - index) as u32);
                    }
                    args.kill_moves[last_move] = i.get_coord_hash();
                    return beta
                }
                alpha = temp_eval;
                chosen_move = i.get_coord_hash();
            }
        }
    }
    if let Some(i) = get_obvious_move(board, &args.kill_moves, last_move) {
        board.make_move(&i);
        if board.hung_king() {
            board.undo_move(&i);
        } else {
            move_piece_hash = i.get_piece_hash(board);
            temp_eval = -search(args, board, depth, index + 1, -beta, -alpha, move_piece_hash, suicide);
            board.undo_move(&i);
            if temp_eval > alpha {
                if temp_eval >= beta {
                    if !i.is_capture() {
                        args.marry_moves[move_piece_hash] += 2i64.pow((depth - index) as u32);
                    }
                    args.kill_moves[last_move] = i.get_coord_hash();
                    args.previous_best_moves.insert(index % 2, hash, args.kill_moves[last_move]);
                    return beta
                }
                alpha = temp_eval;
                chosen_move = i.get_coord_hash();
            }
        }
    }
    vector.clear();
    generate_captures_into(board, vector);
    vector.sort_unstable_by_key(|a| -a.guesstimate_delta() - args.marry_moves[a.get_piece_hash(board)]);
    for i in vector.iter().rev() {
        // since i have this condition cannot assume that only non-captures will raise alpha
        // in the second for loop
        // if eval + i.get_capture_delta() < alpha || see_capture(i, &mut args.reuser, board, index + 1) < 0 {
        if see_capture(i, &mut args.reuser, board, index + 1) < 0 {
            continue;
        }
        board.make_move(i);
        if board.hung_king() {
            board.undo_move(i);
            continue;
        }
        move_piece_hash = i.get_piece_hash(board);
        temp_eval = -search(args, board, depth, index + 1, -beta, -alpha, move_piece_hash, suicide);
        board.undo_move(i);
        if temp_eval > alpha {
            if temp_eval >= beta {
                args.kill_moves[last_move] = i.get_coord_hash();
                args.previous_best_moves.insert(index % 2, hash, args.kill_moves[last_move]);
                return beta
            }
            alpha = temp_eval;
            chosen_move = i.get_coord_hash();
        }
    }
    vector.clear();
    generate_killer_moves(board, vector, index, &mut args.fuck_moves);
    for i in vector.iter() {
        board.make_move(i);
        if board.hung_king() {
            board.undo_move(i);
            continue;
        }
        move_piece_hash = i.get_piece_hash(board);
        temp_eval = -search(args, board, depth, index + 1, -beta, -alpha, move_piece_hash, suicide);
        board.undo_move(i);
        if temp_eval > alpha {
            if temp_eval >= beta {
                if !i.is_capture() {
                    args.marry_moves[move_piece_hash] += 2i64.pow((depth - index) as u32);
                }
                args.kill_moves[last_move] = i.get_coord_hash();
                args.previous_best_moves.insert(index % 2, hash, args.kill_moves[last_move]);
                return beta
            }
            alpha = temp_eval;
            chosen_move = i.get_coord_hash();
        }
    }
    vector.clear();
    // generate the same moves again but i cant be bothered to change that
    generate_into(board, vector);
    vector.sort_unstable_by_key(|a| -a.guesstimate_delta() - args.marry_moves[a.get_piece_hash(board)]);
    // println!("BORING");
    for i in vector.iter().rev() {
        board.make_move(i);
        if board.hung_king() {
            board.undo_move(i);
            hung_count += 1;
            continue;
        }
        move_piece_hash = i.get_piece_hash(board);
        temp_eval = -search(args, board, depth, index + 1, -beta, -alpha, move_piece_hash, suicide);
        board.undo_move(i);
        if temp_eval > alpha {
            if temp_eval >= beta {
                args.kill_moves[last_move] = i.get_coord_hash();
                if !i.is_capture() {
                    args.marry_moves[move_piece_hash] += 2i64.pow((depth - index) as u32);
                    args.fuck_moves[index].insert(args.kill_moves[last_move]);
                }
                args.previous_best_moves.insert(index % 2, hash, args.kill_moves[last_move]);
                return beta
            }
            alpha = temp_eval;
            chosen_move = i.get_coord_hash();
        }
    }
    if vector.len() == hung_count {
        // mate
        if board.in_check() {
            alpha = -100_000_000 + index as i64;
        } else {
            // the mate is stale
            alpha = 0;
        }
    } else {
        args.kill_moves[last_move] = chosen_move;
    }
    args.cache.insert(index, hash, alpha);
    args.previous_best_moves.insert(index % 2, hash, chosen_move);
    alpha
}
//     let vector_pointer;
//     if eval < -1_000.0 {
//         return eval;
//     }
//     // hash = board.get_hash();
//     hash = hasher.get_zobrist_hash(&board);
//     if let Some(x) = cache.get(&hash) {
//         return *x;
//     }
//     if index >= depth {
//         eval = quint_search(reuser, board, index, alpha, beta);
//         cache.insert(hash, eval);
//         return eval;
//     }
//     vector_pointer = reuser.get_vector_pointer(index);
//     unsafe {
//         generate_into(board, vector);
//         vector.sort_by(|a, b| b.cmp(a));
//         for i in vector.iter() {
//             board.make_move(i);
//             eval = -old_search(reuser, board, depth, index + 1, -beta, -alpha, cache, hasher);
//             board.undo_move(i);
//             if eval > alpha {
//                 if eval >= beta {
//                     cache.insert(hash, beta);
//                     return beta
//                 }
//                 alpha = eval;
//             }
//         }
//     }
//     cache.insert(hash, alpha);
//     alpha
// }


// https://www.chessprogramming.org/Quiescence_Search
// pasitikiu kompilerio optimizacijom
fn quiescence_search(reuser: &mut VectorReuser<Move>,
                     check_check: bool,
                     board: &mut Board,
                     index: usize,
                     mut alpha: i64,
                     beta: i64,
                     hasher: &Hasher,
                     pawn_structure_cache: &mut HashMap<u64, i64>) -> i64 {
    let eval = board.evaluate(hasher, pawn_structure_cache);
    let mut temp_eval;
    let vector;
    if eval > alpha {
        if eval >= beta {
            return beta;
        }
        alpha = eval;
    }
    unsafe {
        vector = &mut(*reuser.get_vector_pointer(index));
    }
    vector.clear();
    generate_captures_into(board, vector);
    vector.sort_unstable_by_key(|a| a.to_u8());
    for i in vector.iter().rev() {
        if eval + i.get_capture_delta() < alpha || see_capture(i, reuser, board, index + 1) < 0 {
            continue
        }
        board.make_move(i);
        if board.hung_king() {
            board.undo_move(i);
            continue;
        }
        temp_eval = -quiescence_search(reuser, true, board, index + 1, -beta, -alpha, hasher, pawn_structure_cache);
        board.undo_move(i);
        if temp_eval > alpha {
            if temp_eval >= beta {
                return beta
            }
            alpha = temp_eval;
        }
    }
    vector.clear();
    generate_check_evasions_into(board, vector);
    for i in vector.iter() {
        board.make_move(i);
        if board.hung_king() {
            board.undo_move(i);
            continue;
        }
        temp_eval = -quiescence_search(reuser, false, board, index + 1, -beta, -alpha, hasher, pawn_structure_cache);
        board.undo_move(i);
        if temp_eval > alpha {
            if temp_eval >= beta {
                return beta
            }
            alpha = temp_eval;
        }
    }
    if check_check {
        vector.clear();
        generate_checks_into(board, vector);
        for i in vector.iter() {
            board.make_move(i);
            if board.hung_king() {
                board.undo_move(i);
                continue;
            }
            temp_eval = -quiescence_search(reuser, false, board, index + 1, -beta, -alpha, hasher, pawn_structure_cache);
            board.undo_move(i);
            if temp_eval > alpha {
                if temp_eval >= beta {
                    return beta
                }
                alpha = temp_eval;
            }
        }
    }
    alpha
}

// fn quint_search(reuser: &mut VectorReuser<Move>,
//                 board: &mut Board,
//                 index: usize,
//                 mut alpha: i64,
//                 beta: i64,
//                 hasher: &Hasher,
//                 pawn_structure_cache: &mut HashMap<u64, i64>) -> i64 {
//     let eval = board.evaluate(hasher, pawn_structure_cache);
//     let mut temp_eval;
//     let vector;
//     if board.evaluation.total_material < 0 {
//         return eval;
//     }
//     if eval > alpha {
//         if eval >= beta {
//             return beta;
//         }
//         alpha = eval;
//     }
//     unsafe {
//         vector = &mut(*reuser.get_vector_pointer(index));
//     }
//     vector.clear();
//     generate_check_evasions_into(board, vector);
//     for i in vector.iter() {
//         board.make_move(i);
//         temp_eval = -quint_search(reuser, board, index + 1, -beta, -alpha, hasher, pawn_structure_cache);
//         board.undo_move(i);
//         if temp_eval > alpha {
//             if temp_eval >= beta {
//                 return beta
//             }
//             alpha = temp_eval;
//         }
//     }
//     vector.clear();
//     generate_captures_into(board, vector);
//     vector.sort_unstable_by_key(|a| a.to_u8());
//     for i in vector.iter().rev() {
//         if eval + i.get_capture_delta() < alpha || see_capture(i, reuser, board, index + 1) < 0 {
//             continue
//         }
//         board.make_move(i);
//         if board.hung_king() {
//             board.undo_move(i);
//             continue;
//         }
//         temp_eval = -quint_search(reuser, board, index + 1, -beta, -alpha, hasher, pawn_structure_cache);
//         board.undo_move(i);
//         if temp_eval > alpha {
//             if temp_eval >= beta {
//                 return beta
//             }
//             alpha = temp_eval;
//         }
//     }
//     alpha
// }


fn see_capture(capture: &Move, reuser: &mut VectorReuser<Move>, board: &mut Board, index: usize) -> i64 {
    let mut output = 0;
    let (x, y) = capture.get_xy();
    if let Some(worth) = capture.get_captured_piece_worth() {
        board.make_move(&capture);
        output = worth - static_exchange_evaluation(reuser, board, index, x, y);
        board.undo_move(&capture);
    }
    output
}


// https://www.chessprogramming.org/Static_Exchange_Evaluation
fn static_exchange_evaluation(reuser: &mut VectorReuser<Move>, board: &mut Board, index: usize, x: usize, y: usize) -> i64 {
    let mut output = 0 ;
    let vector = unsafe {
        &mut(*reuser.get_vector_pointer(index))
    };
    let move_with_smallest_piece;
    vector.clear();
    generate_defenders_into(board, vector, x, y);
    if vector.len() == 0 {
        return output
    }
    move_with_smallest_piece = vector.iter().max_by_key(|a| a.to_u8()).unwrap().clone();
    if let Some(worth) = move_with_smallest_piece.get_captured_piece_worth() {
        board.make_move(&move_with_smallest_piece);
        output = max(0, worth - static_exchange_evaluation(reuser, board, index + 1, x, y));
        board.undo_move(&move_with_smallest_piece);
    }
    output
}


pub fn get_previous_best_move(board: &Board,
                          previous_best_moves: &mut HashMapReuser<u64, usize>,
                          index: usize,
                          hash: &u64) -> Option<Move> {
    if let Some(h) = previous_best_moves.get(index % 2, hash) {
        if *h != 4096 {
            get_capture(board, *h)
        } else {
            None
        }
    } else {
        None
    }
}

pub fn get_obvious_move(board: &Board, kill_moves: &[usize; 896], last_move: usize) -> Option<Move> {
    let h = kill_moves[last_move];
    if h != 4096 {
        get_capture(board, h)
    } else {
        None
    }
}


pub fn generate_killer_moves(board: &Board, vector: &mut Vec<Move>, index: usize, fuck_moves: &mut Vec<BestMoves>) {
    // this looks retarded but it makes at least some sense
    let mut h = fuck_moves[index].get();
    if h != 4096 {
        if let Some(m) = get_move(board, h) {
            vector.push(m);
        }
    }
    h = fuck_moves[index].get();
    if h != 4096 {
        if let Some(m) = get_move(board, h) {
            vector.push(m);
        }
    }
    h = fuck_moves[index].get();
    if h != 4096 {
        if let Some(m) = get_move(board, h) {
            vector.push(m);
        }
    }
}


